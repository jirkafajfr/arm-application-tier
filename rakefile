require 'open3'
h = { "true"=>true, true=>true, "false"=>false, false=>false }
region = 'EastUS2'
secnet_resource_group = 'SecNet'
test_resource_group_base = 'TestRG'
private_ip_set_resource_group = "#{test_resource_group_base}PrivIP"
public_ip_set_resource_group = "#{test_resource_group_base}PublicIP"
no_loadbalancing_set_resource_group = "#{test_resource_group_base}NoLB"
chef_enabled_set_resource_group = "#{test_resource_group_base}Chef"

def to_bool(str)
  return true   if str == true   || str =~ (/(true|t|yes|y|1)$/i)
  return false  if str == false  || str =~ (/(false|f|no|n|0)$/i)
  raise ArgumentError.new("invalid value for Boolean: \"#{str}\"")
end

def create_resource_group(region: , resource_group: )
  stdout, stderr, status = Open3.capture3 "az group exists -n \"#{resource_group}\""
  unless to_bool(stdout.strip)
    puts "Resource group: #{resource_group} in #{region} not found. Creating it."
    sh "az group create -n \"#{resource_group}\" --location #{region}"
  end
end

def delete_resource_group(resource_group:)
  stdout, stderr, status = Open3.capture3 "az group exists -n \"#{resource_group}\""
  if to_bool(stdout.strip)
    puts "Resource group: #{resource_group} found. Destroying it."
    sh "az group delete -n #{resource_group} -y"
  end
end

def test_deploy(template_file: , parameters_file: nil, region: , resource_group: )
  create_resource_group(
    region: region, 
    resource_group: resource_group
  )
  parameters_suffix = parameters_file.nil? ? "" : "--parameters #{parameters_file}"
  sh "az group deployment create --template-file #{template_file} --resource-group \"#{resource_group}\" #{parameters_suffix}"
end

namespace :test do
  desc 'deploys the example virtual network resource group'
  task :deploy_example_vnet do
    test_deploy(
      template_file: './test_requirements/secnet.azuredeploy.json',
      region: region,
      resource_group: secnet_resource_group
    )
  end

  desc 'deploys the group containing the private ip loadbalancer set'
  task :deploy_private_loadbalanced_set do
    parameters_file = './example_parameters/private_loadbalanced.parameters.json'
    test_deploy(
      template_file: './serverset.azuredeploy.json',
      parameters_file: parameters_file,
      region: region,
      resource_group: private_ip_set_resource_group 
    )
  end

  desc 'deploys the group containing the public ip loadbalancer set'
  task :deploy_public_loadbalanced_set do
    parameters_file = './example_parameters/public_loadbalanced.parameters.json'
    test_deploy(
      template_file: './serverset.azuredeploy.json',
      parameters_file: parameters_file,
      region: region,
      resource_group: public_ip_set_resource_group 
    )
  end

  desc 'deploys the group containing the loadbalancerless server set'
  task :deploy_no_balancing_set do
    parameters_file = './example_parameters/no_loadbalancing.parameters.json'
    test_deploy(
      template_file: './serverset.azuredeploy.json',
      parameters_file: parameters_file,
      region: region,
      resource_group: no_loadbalancing_set_resource_group 
    )
  end

  desc 'deploys the group containing the chef enabled server set'
  task :deploy_chef_enabled_set do
    parameters_file = './example_parameters/chef.parameters.json'
    test_deploy(
      template_file: './serverset.azuredeploy.json',
      parameters_file: parameters_file,
      region: region,
      resource_group: chef_enabled_set_resource_group 
    )
  end

  desc 'Destroys the group containing the private ip loadbalancer set'
  task :destroy_private_loadbalanced_set do
    delete_resource_group(resource_group: private_ip_set_resource_group)
  end

  desc 'Destroys the group containing the public ip loadbalancer set'
  task :destroy_public_loadbalanced_set do
    delete_resource_group(resource_group: public_ip_set_resource_group)
  end

  desc 'Destroys the group containing the loadbalancerless server set'
  task :destroy_no_balancing_set do
    delete_resource_group(resource_group: no_loadbalancing_set_resource_group)
  end

  desc 'Destroys the group containing the chef enabled server set'
  task :destroy_chef_enabled_set do
    delete_resource_group(resource_group: chef_enabled_set_resource_group)
  end

  desc 'Destroys the example virtual network resource group'
  task :destroy_example_vnet do
    delete_resource_group(resource_group: secnet_resource_group)
  end

  multitask :destroy_configurations => [
    :destroy_private_loadbalanced_set,
    :destroy_public_loadbalanced_set,
    :destroy_no_balancing_set,
    :destroy_chef_enabled_set
  ] do
  end

  desc 'Destroys all resource groups generated by testing'
  task :clean => [
    :destroy_configurations,
    :destroy_example_vnet] do
  end

  desc 'Deploys all test resource groups based on example configurations'
  task :deploy => [
    :deploy_example_vnet,
    :deploy_configurations
  ] do
  end

  multitask :deploy_configurations => [
    :deploy_private_loadbalanced_set,
    :deploy_public_loadbalanced_set,
    :deploy_no_balancing_set,
    :deploy_chef_enabled_set
  ] do
  end
end

task :bump do
  require 'json'
  content_file = './serverset.azuredeploy.json'
  serverset_template = JSON.parse File.read(content_file)
  version = Gem::Version.new(serverset_template['contentVersion'])
  new_version = "#{version.bump.to_s}.0"
  serverset_template['contentVersion'] = new_version

  File.write content_file, JSON.pretty_generate(serverset_template)
  sh <<-CDE
    git add #{content_file}
    git commit -m "bumping version from #{version} to #{new_version}"
    git tag -a v#{new_version} -m \"Releasing v#{new_version}\"
    git push
    git push origin v#{new_version}
  CDE
end