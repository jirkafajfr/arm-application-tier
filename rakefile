require 'open3'

region = 'EastUS2'
secnet_resource_group = 'SecNet'
test_resource_group_base = 'TestRG'

parameter_files = Dir.glob('example_parameters/*.json').map do |n|
  n.gsub('.parameters.json', '').gsub('example_parameters/','')
end

resource_groups = {
  "attached_disk_centos" => "#{test_resource_group_base}CentOSAD",
  "attached_disk_windows" => "#{test_resource_group_base}WinAD", 
  "chef" => "#{test_resource_group_base}Chef", 
  "no_loadbalancing_centos" => "#{test_resource_group_base}NoLBWin",
  "no_loadbalancing_windows" => "#{test_resource_group_base}NoLBLin",
  "private_loadbalanced" => "#{test_resource_group_base}PrivIP", 
  "public_loadbalanced" => "#{test_resource_group_base}PublicIP",
  "powershell_dsc" => "#{test_resource_group_base}PwrDSC"
}

def to_bool(str)
  return true   if str == true   || str =~ (/(true|t|yes|y|1)$/i)
  return false  if str == false  || str =~ (/(false|f|no|n|0)$/i)
  raise ArgumentError.new("invalid value for Boolean: \"#{str}\"")
end

def create_resource_group(region: , resource_group: )
  stdout, stderr, status = Open3.capture3 "az group exists -n \"#{resource_group}\""
  unless to_bool(stdout.strip)
    puts "Resource group: #{resource_group} in #{region} not found. Creating it."
    sh "az group create -n \"#{resource_group}\" --location #{region}"
  end
end

def clean(resource_group:)
  stdout, stderr, status = Open3.capture3 "az group exists -n \"#{resource_group}\""
  if to_bool(stdout.strip)
    puts "Resource group: #{resource_group} found. Destroying it."
    sh "az group delete -n #{resource_group} -y"
  end
end

def deploy(template_file: , parameters_file: nil, region: , resource_group: )
  create_resource_group(
    region: region, 
    resource_group: resource_group
  )
  parameters_suffix = parameters_file.nil? ? "" : "--parameters #{parameters_file}"
  sh "az group deployment create --template-file #{template_file} --resource-group \"#{resource_group}\" #{parameters_suffix}"
end

# Tasks
namespace :deploy do
  desc 'deploys the example network resource group'
  task :network do
    deploy(
      template_file: './test_requirements/secnet.azuredeploy.json',
      region: region,
      resource_group: secnet_resource_group
    )
  end

  parameter_files.each do |parameters|
    desc "Deploys the group defined by the parameter file: #{parameters}"
    task parameters.to_sym do
      parameters_file = "./example_parameters/#{parameters}.parameters.json"
      deploy(
        template_file: './serverset.azuredeploy.json',
        parameters_file: parameters_file,
        region: region,
        resource_group: resource_groups[parameters]
      )
    end
  end

  deploy_tasks = parameter_files.map do |parameters|
    "deploy:#{parameters}"
  end

  multitask all_configurations: deploy_tasks
end

desc 'Deploys all resource groups'
task :deploy => [
  "deploy:network",
  "deploy:all_configurations"
]

namespace :clean do
  task :network do 
    clean(resource_group: secnet_resource_group)
  end
  
  parameter_files.each do |parameters|
    desc "Destroys the group defined by the parameter file: #{parameters}"
    task parameters.to_sym do
      clean(resource_group: resource_groups[parameters])
    end
  end

  clean_tasks = parameter_files.map do |parameters|
    "clean:#{parameters}"
  end

  multitask all_configurations: clean_tasks
end

desc 'Destroys all resource groups'
task :clean => [
  "clean:all_configurations",
  "clean:network"
]

task :bump do
  require 'json'
  content_file = './serverset.azuredeploy.json'
  serverset_template = JSON.parse File.read(content_file)
  version = Gem::Version.new(serverset_template['contentVersion'])
  new_version = "#{version.bump.to_s}.0"
  serverset_template['contentVersion'] = new_version

  File.write content_file, JSON.pretty_generate(serverset_template)
  sh <<-CDE
    git add #{content_file}
    git commit -m "bumping version from #{version} to #{new_version}"
    git tag -a v#{new_version} -m \"Releasing v#{new_version}\"
    git push
    git push origin v#{new_version}
  CDE
end